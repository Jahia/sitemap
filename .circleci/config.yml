version: 2.1

orbs:
  docker: circleci/docker@0.5.20
  jq: circleci/jq@2.2.0
  # TODO IMPORTANT: When creating a module, use a fix version of the orb, not dev:alpha
  jahia-modules-orb: jahia/jahia-modules-orb@dev:alpha

# Parameters are available across the entire config file and can be used with this syntax: << pipeline.parameters.THE_PARAMETER >>
# Avoid using project-specific variables in the jobs or steps.
# Instead, declare those as pipeline parameters (At the top of the config file).
# This eases portability of the config file across different modules
parameters:
  AUDITCI_LEVEL:
    type: string
    default: "high"
  TESTS_PATH:
    type: string
    default: "tests/"
  TESTS_IMAGE:
    type: string
    default: "jahia/sitemap"
  MODULE_ID:
    type: string
    default: "sitemap"
  TESTRAIL_PROJECTNAME:
    type: string
    default: "Sitemap Module"
  GITHUB_SLUG:
    type: string
    default: "jahia/sitemap"
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: "master" # main or master ? set the branch for the main release
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false
  UPDATE_SIGNATURE:
    type: boolean
    default: false
  SSH_KEY_FINGERPRINT:
    type: string
    default: "29:01:4c:71:59:29:c4:65:45:1d:95:1b:59:31:fd:b4"

workflows:
  version: 2
  # On code change is executed each time new code is pushed to a branch
  # Current project configuration in circleci only builds on PR + main, so effectively this is only being executed
  on-code-change:
    unless:
      or:
        - << pipeline.parameters.IS_RELEASE >>
        - << pipeline.parameters.UPDATE_SIGNATURE >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/update-signature:
          pre-steps:
            - jahia-modules-orb/update-signature-prestep
          ssh_key_fingerprints:  << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/lint:
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/security:
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/build:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
            - jahia-modules-orb/update-signature
      - jahia-modules-orb/sonar:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build
      - jahia-modules-orb/publish:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
      # Verifies that the new code works with the latest released version of Jahia
      - jahia-modules-orb/integration_tests:
          name: "Int. Tests - Jahia Latest - Built modules"
          requires:
            - jahia-modules-orb/build
          context: QA_ENVIRONMENT
          #Using Aliases here (8 is the latest of the 8 tree, 8.1 is the latest of the tree, ...)
          JAHIA_IMAGE: jahia/jahia-private:snapshot-dev
          RUN_TESTSIMAGE: << pipeline.parameters.TESTS_IMAGE >>:latest
          TOOLS_USER: root
          TOOLS_PWD: root
          MANIFEST: warmup-manifest-build.yml
          TESTRAIL_MILESTONE: Jahia-Latest
          SKIP_TESTRAIL: "true"
          SKIP_ARTIFACTS: false
          BUILD_TESTSIMAGE: true
      - jahia-modules-orb/docker-publish:
          context: QA_ENVIRONMENT
          requires:
            - Int. Tests - Jahia Latest - Built modules
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>

  # The on-release workflow was created to handle the full release lifecycle after creating a release using GitHub
  # https://github.com/Jahia/sitemap/releases
  # The release is first created using the "pre-release" tag and a pipeline is triggered from a GitHub action
  # This pipeline perform the following action:
  # - Delete the tag created by GitHub (unnecessary)
  # - Run mvn release:prepare
  # - Generate the changelog using auto (https://www.npmjs.com/package/auto)
  # - Run mvn release:perform
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/generate-changelog:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/release:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/generate-changelog
      - jahia-modules-orb/update-signature:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/release

  # The on-signature-update workflow was created to handle the signage of modules in case it needs to be done manually.
  # https://github.com/Jahia/sitemap#manually-updating-signature-via-command-line
  # The pipeline performs the following action:
  # - Check the commit message that it contains [ci sign], [sign ci] or [jahia update signature]
  # - Downloads the keymaker cli (version 2.0)
  # - Obtain the new signature using the keymaker cli
  # - Update the pom.xml
  # - Push changes back to github
  on-signature-update:
    when: << pipeline.parameters.UPDATE_SIGNATURE >>
    jobs:
      - jahia-modules-orb/update-signature:
          pre-steps:
            - jahia-modules-orb/checkout
            - run:
                name: Verifying if signature needs to be updated
                command: |
                  commit_message=$(git log -1 HEAD --pretty=format:%s)
                  if [[ $commit_message != *"[ci sign]"* \
                     && $commit_message != *"[sign ci]"* \
                     && $commit_message != *"[jahia update signature]"* ]]; then
                    echo "Signature update has not been requested. Proceeding without updating the signature"
                    circleci-agent step halt
                  fi
          context: QA_ENVIRONMENT

  # The objective of nightly runs is to ensure the codebase still passes tests:
  # - With the latest releases version of Jahia
  # - With the current snapshot of Jahia
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/integration_tests:
          matrix:
            parameters:
              JAHIA_IMAGE: ["jahia/jahia-private:snapshot-dev"]
              RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
              MANIFEST: ["warmup-manifest-snapshot.yml"]
              TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
              TOOLS_USER: ["root"]
              TOOLS_PWD: ["root"]
          name: Nightly-<< matrix.JAHIA_IMAGE >>
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize

  # Monthly, we run the integration testing suite with older (but still supported) versions of Jahia and set versions of the module:
  # This provides a reference point (when was the latest time this was tested)
  # In this section we want to see set Jahia versions (not aliases)
  # monthly:
  #   triggers:
  #     - schedule:
  #         cron: '0 0 1 * *'
  #         filters:
  #           branches:
  #             only:
  #               - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
  #   jobs:
  #     - initialize
  #     - integration_tests:
  #         matrix:
  #           parameters:
  #             JAHIA_IMAGE: ["jahia/jahia-dev:8.0.1.0"]
  #             RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
  #             MANIFEST: ["warmup-manifest-snapshot.yml"]
  #             TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
  #             TOOLS_USER: ["root"]
  #             TOOLS_PWD: ["root"]
  #         name: Monthly-<< matrix.JAHIA_IMAGE >>-with-ES-<< matrix.ELASTICSEARCH_VERSION >>
  #         context: QA_ENVIRONMENT
  #         requires:
  #           - initialize
