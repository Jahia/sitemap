version: 2.1

orbs:
  docker: circleci/docker@0.5.20
  jq: circleci/jq@2.2.0
  jahia-modules-orb: jahia/jahia-modules-orb@0.1.6

# Parameters are available across the entire config file and can be used with this syntax: << pipeline.parameters.THE_PARAMETER >>
# Avoid using project-specific variables in the jobs or steps.
# Instead, declare those as pipeline parameters (At the top of the config file).
# This eases portability of the config file across different modules
parameters:
  AUDITCI_LEVEL:
    type: string
    default: "high"
  TESTS_PATH:
    type: string
    default: "tests/"
  TESTS_IMAGE:
    type: string
    default: "jahia/sitemap"
  TESTRAIL_MILESTONE:
    type: string
    default: "Default"
  MODULE_ID:
    type: string
    default: "sitemap"
  TESTRAIL_PROJECTNAME:
    type: string
    default: "Sitemap Module"
  GITHUB_SLUG:
    type: string
    default: "jahia/sitemap"
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: "master" # main or master ? set the branch for the main release
  JAHIA_IMAGE:
    type: string
    default: "jahia/jahia-ee-dev:8-SNAPSHOT"
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false
  UPDATE_SIGNATURE:
    type: boolean
    default: false
  SSH_KEY_FINGERPRINT:
    type: string
    default: "29:01:4c:71:59:29:c4:65:45:1d:95:1b:59:31:fd:b4"
  SHOULD_SKIP_ARTIFACTS:
    type: boolean
    default: true
  SHOULD_SKIP_TESTRAIL:
    type: boolean
    default: true
  SHOULD_SKIP_NOTIFICATIONS:
    type: boolean
    default: true
  SHOULD_SKIP_ZENCREPES:
    type: boolean
    default: false
  TESTS_MANIFEST: # Manifest to be executed by the test container when triggered from an API call
    type: string
    default: ""
  IS_ROLLBACK:
    type: boolean
    default: false
  IS_MANUAL_TESTRUN: # Was the workflow triggered by an API call ?
    type: boolean
    default: false

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .


jobs:
  # Lint the project or any other static code analysis
  # This action should run in parrallel, failed linting should trigger an error but should not stop execution of the tests
  # Ideally this should lint both the module codebase and the test codebase, we want to fail on warning (it is up the the
  # team to either fix the warning, ignore the warning, or modify the ruleset so that this warnning doesn't happen again)
  lint:
    <<: *workdir
    docker:
      - image: cimg/node:14.15
    steps:
      - *attach-workspace
      - run:
          name: Yarn lint tests
          command: |
            jahia-modules-orb/lint
  security:
    <<: *workdir
    docker:
      - image: cimg/node:14.15
    steps:
      - *attach-workspace
      - run:
          name: Run security command
          command: jahia-modules-orb/security
  # We also want the test image to be versioned and published to Docker Hub whenever a new tag is created
  # This would allow us to re-use a test image whenever we want to test with an earlier version of the module
  docker-publish:
    <<: *workdir
    docker:
      - image: circleci/openjdk:8-jdk-stretch-browsers
    steps:
      - *attach-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << pipeline.parameters.TESTS_IMAGE >> image to docker hub
          command: |
            cd << pipeline.parameters.TESTS_PATH >>
            docker load -i tests_image.tar
            if [ "$CIRCLE_BRANCH" = "<< pipeline.parameters.PRIMARY_RELEASE_BRANCH >>" ]; then
                IMAGE_TAG=latest
            else
                IMAGE_TAG=${CIRCLE_TAG/''}
            fi
            echo "Image tag is: $IMAGE_TAG"
            docker tag << pipeline.parameters.TESTS_IMAGE >>:latest << pipeline.parameters.TESTS_IMAGE >>:$IMAGE_TAG
            docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASSWORD
            echo "Tagged the image"
            docker push << pipeline.parameters.TESTS_IMAGE >>:$IMAGE_TAG
            echo "Pushed tag"

workflows:
  # On code change is executed each time new code is pushed to a branch
  # Current project configuration in circleci only builds on PR + main, so effectively this is only being executed
  on-code-change:
    unless:
      or:
        - << pipeline.parameters.IS_RELEASE >>
        - << pipeline.parameters.UPDATE_SIGNATURE >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/update-signature:
          pre-steps:
            - jahia-modules-orb/update-signature-prestep
          ssh_key_fingerprints:  << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
      - lint:
          requires:
            - jahia-modules-orb/initialize
      - security:
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/build:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
            - jahia-modules-orb/update-signature
      - jahia-modules-orb/sonar-analysis:
          context: QA_ENVIRONMENT
          primary_release_branch: << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
          module_id: << pipeline.parameters.MODULE_ID >>
          github_slug: << pipeline.parameters.GITHUB_SLUG >>
          requires:
            - jahia-modules-orb/build
      - jahia-modules-orb/publish:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
      # Verifies that the new code works with the latest released version of Jahia
      - jahia-modules-orb/integration-tests:
          name: "Int. Tests - Jahia Latest - Built modules"
          requires:
            - jahia-modules-orb/build
          context: QA_ENVIRONMENT
          #Using Aliases here (8 is the latest of the 8 tree, 8.1 is the latest of the tree, ...)
          JAHIA_IMAGE: jahia/jahia-private:snapshot-dev
          RUN_TESTSIMAGE: << pipeline.parameters.TESTS_IMAGE >>:latest
          TOOLS_USER: root
          TOOLS_PWD: root
          MANIFEST: warmup-manifest-build.yml
          TESTRAIL_MILESTONE: Jahia-Latest
          SKIP_TESTRAIL: "true"
          SKIP_ARTIFACTS: false
          BUILD_TESTSIMAGE: true
          # Not sure what about below
          jahia_image: jahia/jahia-ee-dev:8-SNAPSHOT
          tests_manifest: provisioning-manifest-build.yml
          module_id: << pipeline.parameters.MODULE_ID >>
          testrail_project: << pipeline.parameters.TESTRAIL_PROJECTNAME >>
          testrail_milestone: << pipeline.parameters.TESTRAIL_MILESTONE >>
      - docker-publish:
          context: QA_ENVIRONMENT
          requires:
            - Int. Tests - Jahia Latest - Built modules
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>

  # The on-release workflow was created to handle the full release lifecycle after creating a release using GitHub
  # https://github.com/Jahia/sitemap/releases
  # The release is first created using the "pre-release" tag and a pipeline is triggered from a GitHub action
  # This pipeline perform the following action:
  # - Delete the tag created by GitHub (unnecessary)
  # - Run mvn release:prepare
  # - Generate the changelog using auto (https://www.npmjs.com/package/auto)
  # - Run mvn release:perform
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/generate-changelog:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/release:
          context: QA_ENVIRONMENT
          module_id: << pipeline.parameters.MODULE_ID >>
          github_slug: << pipeline.parameters.GITHUB_SLUG >>
          release_id: << pipeline.parameters.RELEASE_ID >>
          release_version: << pipeline.parameters.RELEASE_VERSION >>
          primary_release_branch: << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
          ssh_key_fingerprints:  << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          requires:
            - jahia-modules-orb/generate-changelog
      - jahia-modules-orb/update-signature:
          context: QA_ENVIRONMENT
          ssh_key_fingerprints: << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          requires:
            - jahia-modules-orb/release
      - wait-for-approval:
          type: approval
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/release
      - jahia-modules-orb/release-publication:
          context: QA_ENVIRONMENT
          requires:
            - wait-for-approval
          module_id: << pipeline.parameters.MODULE_ID >>
          release_version: << pipeline.parameters.RELEASE_VERSION >>

  # The on-signature-update workflow was created to handle the signage of modules in case it needs to be done manually.
  # https://github.com/Jahia/sitemap#manually-updating-signature-via-command-line
  # The pipeline performs the following action:
  # - Check the commit message that it contains [ci sign], [sign ci] or [jahia update signature]
  # - Downloads the keymaker cli (version 2.0)
  # - Obtain the new signature using the keymaker cli
  # - Update the pom.xml
  # - Push changes back to github
  on-signature-update:
    when: << pipeline.parameters.UPDATE_SIGNATURE >>
    jobs:
      - jahia-modules-orb/update-signature:
          pre-steps:
            - jahia-modules-orb/update-signature-prestep
          ssh_key_fingerprints:  << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          context: QA_ENVIRONMENT
  # The manual-run workflow was created to allow the triggering of an integration testing run using CircleCI pipeline API
  manual-run:
    when: << pipeline.parameters.IS_MANUAL_TESTRUN >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/integration-tests:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
          jahia_image: << pipeline.parameters.JAHIA_IMAGE >>
          tests_manifest: << pipeline.parameters.TESTS_MANIFEST >>
          module_id: << pipeline.parameters.MODULE_ID >>
          testrail_project: << pipeline.parameters.TESTRAIL_PROJECTNAME >>
          testrail_milestone: << pipeline.parameters.TESTRAIL_MILESTONE >>
          should_skip_artifacts: << pipeline.parameters.SHOULD_SKIP_ARTIFACTS >>
          should_skip_testrail: << pipeline.parameters.SHOULD_SKIP_TESTRAIL >>
          should_skip_notifications: << pipeline.parameters.SHOULD_SKIP_NOTIFICATIONS >>
          should_skip_zencrepes: << pipeline.parameters.SHOULD_SKIP_ZENCREPES >>
  # The on-rollback workflow was created to handle release rollback when a release has been deleted from Github
  # The rollback pipeline/job performs the following action:
  # - restore rollback artifact cache created from the release job
  # - Run mvn:rollback
  # - Delete github tag associated with the release
  on-rollback:
    when: << pipeline.parameters.IS_ROLLBACK >>
    jobs:
      - jahia-modules-orb/release-rollback:
          context: QA_ENVIRONMENT
          ssh_key_fingerprints: << pipeline.parameters.SSH_KEY_FINGERPRINT >>
          release_id: << pipeline.parameters.RELEASE_ID >>
          release_version: << pipeline.parameters.RELEASE_VERSION >>
      - jahia-modules-orb/release-cancellation:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/release-rollback
          module_id: << pipeline.parameters.MODULE_ID >>
          pipeline_id: << pipeline.id >>
          release_version: << pipeline.parameters.RELEASE_VERSION >>

  # The objective of nightly runs is to ensure the codebase still passes tests:
  # - With the latest releases version of Jahia
  # - With the current snapshot of Jahia
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/integration_tests:
          matrix:
            parameters:
              JAHIA_IMAGE: ["jahia/jahia-private:snapshot-dev"]
              RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
              MANIFEST: ["warmup-manifest-snapshot.yml"]
              TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
              TOOLS_USER: ["root"]
              TOOLS_PWD: ["root"]
          name: Nightly-<< matrix.JAHIA_IMAGE >>
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize

  # Monthly, we run the integration testing suite with older (but still supported) versions of Jahia and set versions of the module:
  # This provides a reference point (when was the latest time this was tested)
  # In this section we want to see set Jahia versions (not aliases)
  # monthly:
  #   triggers:
  #     - schedule:
  #         cron: '0 0 1 * *'
  #         filters:
  #           branches:
  #             only:
  #               - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
  #   jobs:
  #     - initialize
  #     - integration_tests:
  #         matrix:
  #           parameters:
  #             JAHIA_IMAGE: ["jahia/jahia-dev:8.0.1.0"]
  #             RUN_TESTSIMAGE: ["<< pipeline.parameters.TESTS_IMAGE >>:latest"]
  #             MANIFEST: ["warmup-manifest-snapshot.yml"]
  #             TESTRAIL_MILESTONE: ["<< matrix.JAHIA_IMAGE >>"]
  #             TOOLS_USER: ["root"]
  #             TOOLS_PWD: ["root"]
  #         name: Monthly-<< matrix.JAHIA_IMAGE >>-with-ES-<< matrix.ELASTICSEARCH_VERSION >>
  #         context: QA_ENVIRONMENT
  #         requires:
  #           - initialize
