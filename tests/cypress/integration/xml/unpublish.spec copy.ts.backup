import {SitemapPage} from "../../page-object/sitemap.page";
import { waitUntilRefresh } from "../../utils/waitUntilRefresh";

const siteKey = 'digitall'
const sitePath = `/sites/${siteKey}`
const homePagePath = `${sitePath}/home`
const testPageName = 'a_test_279'
const testPagePath = `${homePagePath}/${testPageName}`
const languages = ['en', 'de', 'fr']
const defaultLanguage = 'en'
const sitemapUrl = 'http://localhost:8080/sites/digitall/sitemap.xml';

describe('Check published & unpublished pages', () => {

    before('Create content for test', () => {
        // Creates the test page with content in all 3 languages
        cy.apollo({
            variables: {
                parentPathOrId: homePagePath,
                name: testPageName,
                template: 'simple',
                language: languages.join(),
            },
            mutationFile: 'graphql/jcrAddPagePublishTest.graphql',
        })
    })

    after('Cleanup test data', () => {
        // Remove the page that was created for the test
        cy.apollo({
            variables: {
                pathOrId: testPagePath,
            },
            mutationFile: 'graphql/jcrDeleteNode.graphql',
        })

        // Publish home to remove the pages from the sitemap
        cy.apollo({
            variables: {
                pathOrId: homePagePath,
                languages: languages,
                publishSubNodes: true,
                includeSubTree: true,
            },
            mutationFile: 'graphql/jcrPublishNode.graphql',
        })
    })

    it('Verifies that the sitemap does not contain the empty page', function () {
        //Publish a page in all languages and verifies it's available in the sitemap
        cy.task('parseSitemap', { url: sitemapUrl }).then((urls: Array<string>) => {
            cy.log(`Sitemap contains: ${urls.length} URLs`)
            expect(urls.length).to.be.greaterThan(0)
            cy.log(`Sitemap should not contain any url with path: ${testPageName}`)
            const pageUrls = urls.filter((u) => u.includes(testPageName))
            expect(pageUrls.length).to.equal(0)
        })
    })
    
    // Publishes a page in all languages and verifies it's available in the sitemap
    // The sitemap should refresh automatically after publication
    it('Publish page in all languages and check sitemap', function () {
        cy.task('parseSitemap', { url: sitemapUrl }).then((originalSitemapUrls: Array<string>) => {
            cy.log(`Starting with a sitemap containing ${originalSitemapUrls.length} URLs`)

            // Publish the page in all languages with subnodes
            cy.log(`Publish the page in all languages with subnodes`)
            cy.apollo({
                variables: {
                    pathOrId: testPagePath,
                    languages: languages,
                    publishSubNodes: true,
                    includeSubTree: true,
                },
                mutationFile: 'graphql/jcrPublishNode.graphql',
            })

            // Wait until the sitemap is modified
            cy.waitUntil(
                () =>
                    cy.task('parseSitemap', { url: sitemapUrl }).then((newSitemapUrls: Array<string>) => {
                        // cy.log(`Fetched sitemap - Contains ${newSitemapUrls.length} URLs`)
                        const difference = originalSitemapUrls
                            .filter(u => !newSitemapUrls.includes(u))
                            .concat(newSitemapUrls.filter(u => !originalSitemapUrls.includes(u)));
                        if (difference.length === 0) {
                            return false
                        }
                        return true
                    }),
                {
                    errorMsg: `Unable to detect a difference in sitemap: ${sitemapUrl} within set timeout`, // overrides the default error message
                    timeout: 20000,
                    verbose: true,
                    interval: 1000, // performs the check every 1 sec, default to 200
                },
            )

            // Fetch the new sitemap again and test the result
            cy.task('parseSitemap', { url: sitemapUrl }).then((newSitemapUrls: Array<string>) => {
                cy.log(`The updated sitemap contains ${newSitemapUrls.length} URLs`)
                const difference = originalSitemapUrls
                .filter(u => !newSitemapUrls.includes(u))
                .concat(newSitemapUrls.filter(u => !originalSitemapUrls.includes(u)));
                cy.log(`The following URLs are different:`)
                for (const url of difference) {
                    cy.log(url)
                }
                // There should be only 3 URL for the page name
                expect(difference.filter((u) => u.includes(testPageName)).length).to.equal(3)
            })
        })
    })

    // Unpublish a lang and make sure only that lang is removed from publication
    // The sitemap should refresh automatically after publication

    for (const lang of languages) {
        it(`Unpublishing page content in language: ${lang} and check sitemap for absence of this link`, function () {
            cy.task('parseSitemap', { url: sitemapUrl }).then((originalSitemapUrls: Array<string>) => {
                cy.log(`Starting with a sitemap containing ${originalSitemapUrls.length} URLs`)
                

                // Before any changes are made, there should be 3 URLs for the page name
                expect(originalSitemapUrls.filter((u) => u.includes(testPageName)).length).to.equal(3)

                // Unpublish the page in that particular language
                cy.log(`Unpublish content in ${lang}`)
                cy.apollo({
                    variables: {
                        pathOrId: testPagePath,
                        languages: [lang],
                    },
                    mutationFile: 'graphql/jcrUnpublishNode.graphql',
                })

                // Wait until the sitemap is modified
                cy.waitUntil(
                    () =>
                        cy.task('parseSitemap', { url: sitemapUrl }).then((newSitemapUrls: Array<string>) => {
                            // cy.log(`Fetched sitemap - Contains ${newSitemapUrls.length} URLs`)
                        const difference = originalSitemapUrls
                            .filter(u => !newSitemapUrls.includes(u))
                            .concat(newSitemapUrls.filter(u => !originalSitemapUrls.includes(u)));
                            if (difference.length === 0) {
                                return false
                            }
                            return true
                        }),
                    {
                        errorMsg: `Unable to detect a difference in sitemap: ${sitemapUrl} within set timeout`, // overrides the default error message
                        timeout: 20000,
                        verbose: true,
                        interval: 1000, // performs the check every 1 sec, default to 200
                    },
                )
    
                // Fetch the new sitemap again and test the result
                cy.task('parseSitemap', { url: sitemapUrl }).then((newSitemapUrls: Array<string>) => {
                    cy.log(`The updated sitemap contains ${newSitemapUrls.length} URLs`)
                    const removedUrl = originalSitemapUrls
                        .filter(x => !newSitemapUrls.includes(x))
                    cy.log(`The following URLs have been removed in the updated sitemap:`)
                    for (const url of removedUrl) {
                        cy.log(url)
                    }
                    // In that case, the url does not contain the language in the URL
                    expect(removedUrl.length).to.equal(1)

                    if (lang === defaultLanguage) {
                        // Find the default language URL by substracting the other languages from the original sitemap
                        const otherLanguages = languages.filter((l) => !l.includes(lang))
                        const defaultUrl = originalSitemapUrls.filter((u) => u.includes(testPageName)).find((u) => {
                            for (const l of otherLanguages) {
                                if (u.includes(`/${l}/`)) {
                                    return false
                                }
                            }
                            return true
                        })
                        // The single URL that was removed shoudl be the default URL
                        expect(removedUrl[0]).to.equal(defaultUrl)
                        
                    } else {
                        expect(removedUrl.filter((u) => u.includes(`/${lang}${sitePath}`)).length).to.equal(1)
                    }
                })

                // Publish all pages in all languages to restore the page that was just unpublished
                cy.log(`Publish the page in all languages with subnodes`)
                cy.apollo({
                    variables: {
                        pathOrId: testPagePath,
                        languages: languages,
                        publishSubNodes: true,
                        includeSubTree: true,
                    },
                    mutationFile: 'graphql/jcrPublishNode.graphql',
                })

            })
        })
    }

    // it('Publish the page and verify sitemap contains the doc in all languages', function () {
    //     const sitemapUrl = 'http://localhost:8080/sites/digitall/sitemap.xml';
    //     // Get the sitemap prior to the change
    //     cy.task('parseSitemap', { url: sitemapUrl }).then((originalUrls: Array<string>) => {
    //         cy.log(`Pre-flush sitemap contains ${originalUrls.length} URLs`)

    //         // Publish the page in all languages with subnodes
    //         cy.log(`Publish the page in all languages with subnodes`)
    //         cy.apollo({
    //             variables: {
    //                 pathOrId: testPagePath,
    //                 languages: languages,
    //                 publishSubNodes: true,
    //                 includeSubTree: true,
    //             },
    //             mutationFile: 'graphql/jcrPublishNode.graphql',
    //         })

    //         cy.log(`Flushing the sitemap`)
    //         cy.apollo({
    //             variables: {
    //                 siteKey: siteKey,
    //             },
    //             mutationFile: 'graphql/flushSitemap.graphql',
    //         })

    //         cy.waitUntil(
    //             () =>
    //                 cy.task('parseSitemap', { url: sitemapUrl }).then((newUrls: Array<string>) => {
    //                     cy.log(`Fetched sitemap - Contains ${newUrls.length} URLs`)
    //                     const difference = originalUrls
    //                         .filter(x => !newUrls.includes(x))
    //                         .concat(newUrls.filter(x => !originalUrls.includes(x)));
    //                     // cy.log(JSON.stringify(difference))
    //                     console.log(difference)
    //                     if (difference.length === 0) {
    //                         return false
    //                     }
    //                     return true
    //                 }),
    //             {
    //                 errorMsg: `Error refreshing sitemap for site: ${siteKey}`, // overrides the default error message
    //                 timeout: 60000, // timeout to 1min
    //                 verbose: true,
    //                 interval: 1000, // performs the check every 1 sec, default to 200
    //             },
    //         )

    //         // flushSitemap('http://localhost:8080/sites/digitall/sitemap.xml', 'digitall')

    //         //Publish a page in all languages and verifies it's available in the sitemap
    //         cy.task('parseSitemap', { url: 'http://localhost:8080/sites/digitall/sitemap.xml' }).then((urls: Array<string>) => {
    //             cy.log(`Sitemap contains: ${urls.length} URLs`)
    //             expect(urls.length).to.be.greaterThan(0)
    //             cy.log(`Sitemap should not contain any url with path: ${testPagePath}`)
    //             const pageUrls = urls.filter((u) => u.includes(testPagePath))
    //             expect(pageUrls.length).to.equal(0)
    //             // for (const lang of languages) {
    //             //     cy.log(`Verifying page: ${lang}/${testPagePath} does not exist`)
    //             // }
    //             // cy.log(JSON.stringify(urls))
    //         })
    //     })
    // })

    // it('Publish pages in all languages', function () {
    //     // Publish the page in all languages without subnodes
    //     cy.apollo({
    //         variables: {
    //             pathOrId: testPagePath,
    //             language: languages.join(),
    //             publishSubNodes: false,
    //             includeSubTree: false,
    //         },
    //         mutationFile: 'graphql/jcrPublishNode.graphql',
    //     })
    //     cy.task('parseSitemap', { url: 'http://localhost:8080/sites/digitall/sitemap.xml' }).then((urls: Array<string>) => {
    //         cy.log(`Sitemap contains: ${urls.length} URLs`)
    //         expect(urls.length).to.be.greaterThan(0)
    //         cy.log(`Sitemap should not contain any url with path: ${testPagePath}`)
    //         const pageUrls = urls.filter((u) => u.includes(testPagePath))
    //         expect(pageUrls.length).to.equal(0)
    //         // for (const lang of languages) {
    //         //     cy.log(`Verifying page: ${lang}/${testPagePath} does not exist`)
    //         // }
    //         // cy.log(JSON.stringify(urls))
    //     })
    // })

    // for (const lang of languages) {
    //     it(`Testing publication only for language: ${lang}`, function () {
    //         cy.log(`Publishing page: $testPagePath/${lang}`)
    //         cy.apollo({
    //             variables: {
    //                 pathOrId: `${testPagePath}/${lang}`,
    //                 language: lang,
    //                 publishSubNodes: false,
    //                 includeSubTree: false,
    //             },
    //             mutationFile: 'graphql/jcrPublishNode.graphql',
    //         })

    //         cy.wait(30000)

    //         cy.log(`Unpublishing page: ${testPagePath}/${lang}`)
    //         cy.apollo({
    //             variables: {
    //                 pathOrId: `${testPagePath}/${lang}`,
    //                 language: lang,
    //             },
    //             mutationFile: 'graphql/jcrUnpublishNode.graphql',
    //         })
    //     })
    // }


})
